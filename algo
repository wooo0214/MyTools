// 易混淆点
/* 声明指针 vs 声明引用
* is used to declare pointers and to dereference them.
& is used to declare references （引用） and to get the address of a variable.

eg
int a;
int *p0 = &a;
*/

/* 访问结点数据或左右孩子、前后驱时的方式：node.data vs node->data
In C++, whether you use node.data or node->data to access the data of a binary tree node depends on how the node is being referenced:

node.data: This syntax is used when node is an object of the node class or struct. In other words, node is a direct instance of the node.

struct TreeNode { int data; TreeNode* left; TreeNode* right; }; 
TreeNode node; node.data = 10; // Accessing data directly

node->data: This syntax is used when node is a pointer to an object of the node class or struct. The arrow operator (->) is used to access members of the object that the pointer points to.

TreeNode* node = new TreeNode(); node->data = 10; // Accessing data through a pointer

Why Use Each:
node.data: Use this when you have a direct instance of the node. This is straightforward and does not involve pointers.
node->data: Use this when you have a pointer to the node. This is common in binary trees because nodes often point to other nodes (e.g., left and right children).

Example in Context:
In a typical binary tree implementation, nodes are often dynamically allocated and linked together using pointers. Therefore, you would frequently use the node->data syntax.

struct TreeNode { int data; TreeNode* left; TreeNode* right; }; void insert(TreeNode*& root, int value) { if (root == nullptr) { root = new TreeNode(); root->data = value; root->left = nullptr; root->right = nullptr; } else if (value < root->data) { insert(root->left, value); } else { insert(root->right, value); } }
In this example, root is a pointer to a TreeNode, so you use root->data to access the data.

Summary:
Use node.data when node is an object.
Use node->data when node is a pointer to an object.
This distinction is crucial for correctly accessing and manipulating the data within your binary tree nodes.
*/

//以下是代码题

//generates permutations of numbers from 1 to n, and then print those permutations by ascending order
// for example, input n=3, there will be 6 permutations (123,132,213,231,312,321). It will print them in below order:
/*
1, 2, 3
1, 3, 2
2, 1, 3
2, 3, 1
3, 1, 2
3, 2, 1
*/
#include <stdio.h> 
int n; // output 1 to n in ascending order, n<100 
int a[100]; // the current sorting 
int search(int x) // find the element at position x 
{ if (x == n + 1) { 
    for (int i = 1; i <= n; i++) printf("%d ", a[i]); 
    printf("\n"); 
    return 0; } 
    
for (int i = 1; i <= n; i++) { 
    bool ok = true; 
    for (int j = 1; j < x; j++) 
        if (a[j] == i) { ok = false; break; } 
    if (ok) { a[x] = i; search(x + 1); } 
}


return 0; 

} 

int main() 
{ scanf("%d", &n); 
search(1); 
return 0; 
}

//单链表，顺序查找某元素
//初始化一个带头指针链表，指针p和待查找元素x
List*seek (List *head,int x); 
List *p;
p=head->next ;
while (p!=null && p->data !=x)
    p=p->next //当p指针不为空且不等于x时继续往后查找
return p

//单链表，后插
//在p位置后插入新元素x
List*backinsert (List*p, int x);
Node* c = (Node*) malloc (Sizeof(Node)); //定义一个新结点，为待插入的新结点
c->data = x;

c->next = p->next;
p->next = c

return p;

//单链表，查找并删除某元素
List*delete (List*L, ElemType e);
Node q,r;

q=q->next;
r=L->next;

if (L->data == e) return L->next;

while (r->data !=x && r->data != NULL) 
q=r;
r=r->next;

if (r->data == NULL) return p; // 查找完成没有找到e
else {
q->next = r->next;
return p }

// 栈
//定义顺序栈
# define maxisize 50
typedef struct {
   ElemType data[maxsize];
   int top  
} Sqstack;

//入栈 push
bool push(Sqstack&S, elemtype x){
    if (S.top==maxsize-1) 
        return false;
    else {
        S.top=S.top+1;
        S.data[S.top]=x;

        return true;
    }    
}

//出栈 pop
bool pop(Sqstack&S, elemtype &x){
    if (S.top == -1)
        return false;
    else
        x = S.data[S.top];
        S.top = S.top-1;
        return true;
        
}

// linkstack 链栈
typedef struct Linknode {
    elemtype data;
    struct linknode*next;
} linkstack;

// 检查n个字符（0~n）是否中心对称
int de (Linklist L, int n){
    int i;
    char s[n/2];
    Lnode*p = L->next;

    for (i=0;i<n/2;i++){
        s[i]=p.data;
        p=p->next;
    }
    i--; // 让i指回前半部分字符串的末尾

    if (i%2==1) p=p->next;

    while (p!=NULL&&p.data==s[i]) {  // 判断条件。当p所指结点不为空，且当前p所指结点值与s[i]相等时，继续进行比较，直到有不相同的元素或比完为止
        i--;
        p=p->next;
    }

    if (i==-1) return 1;
    else return 0;

}

// BST Tree 在二叉排序树中查找某个元素x
BSTNode* BST_Search (BiTree T, Keytype x) { //BSTNode*: This specifies the return type of the function, which is a pointer to a BSTNode.
    while (T!=NULL && x!=T->data) {
        if (x<T.data) T=T.lchild;
        else T=T.rchild;
    }
    
    return T;
}

// 插入
// 考虑三种情况：1. T为空树，新建结点插入；2. 待插入值等于T的根节点值，插入失败；3. 递归地加入子树：小的插左大的插右
int BTS_Insert(BiTree &T, KeyType x){ // &T, a reference to a BiTree object 
    if (T==NUL) {
        T= (BiTree)malloc(sizeof(BSTNode)); // 新建结点
        T->data = x;
        T->lchild=T->rchild=NULL;
        return 1;
    }

    else if (x==T->data)

        return 0;

    else if (x<T->data) 

        return BTS_Insert(T->lchild, x); 
        
        else return BTS_Insert(T->rchild, x);
    
}

//二叉排序树的创建

// 图

//冒泡排序
/*
从后往前依次比较亮亮相林
*/