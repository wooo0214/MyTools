//generates permutations of numbers from 1 to n, and then print those permutations by ascending order
// for example, input n=3, there will be 6 permutations (123,132,213,231,312,321). It will print them in below order:
/*
1, 2, 3
1, 3, 2
2, 1, 3
2, 3, 1
3, 1, 2
3, 2, 1
*/
#include <stdio.h> 
int n; // output 1 to n in ascending order, n<100 
int a[100]; // the current sorting 
int search(int x) // find the element at position x 
{ if (x == n + 1) { 
    for (int i = 1; i <= n; i++) printf("%d ", a[i]); 
    printf("\n"); 
    return 0; } 
    
for (int i = 1; i <= n; i++) { 
    bool ok = true; 
    for (int j = 1; j < x; j++) 
        if (a[j] == i) { ok = false; break; } 
    if (ok) { a[x] = i; search(x + 1); } 
}


return 0; 

} 

int main() 
{ scanf("%d", &n); 
search(1); 
return 0; 
}

//单链表，顺序查找某元素
//初始化一个带头指针链表，指针p和待查找元素x
List*seek (List *head,int x); 
List *p;
p=head->next ;
while (p!=null && p->data !=x)
    p=p->next //当p指针不为空且不等于x时继续往后查找
return p

//单链表，后插
//在p位置后插入新元素x
List*backinsert (List*p, int x);
Node* c = (Node*) malloc (Sizeof(Node)); //定义一个新结点，为待插入的新结点
c->data = x;

c->next = p->next;
p->next = c

return p;

//单链表，查找并删除某元素
List*seek (List*head, int x);
List*p;

if (head->next == NULL) return 0;
else while (p->data !=x) p=p->next;

List*prev = 